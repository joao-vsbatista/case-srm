/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.srm.currency.api.generated;

import com.srm.currency.model.generated.ErrorResponseOpenApiDto;
import com.srm.currency.model.generated.ExchangeRateCreateOpenApiDto;
import com.srm.currency.model.generated.ExchangeRateOpenApiDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-08-06T15:54:51.646202200-03:00[America/Sao_Paulo]")
@Validated
@Controller
@Tag(name = "Taxas de Câmbio", description = "Operações para consultar/atualizar taxas de câmbio")
@RequestMapping("${openapi.sistemaDeConversoDeMoedasDoReinoSRM.base-path:}")
public interface ExchangeRatesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /exchange-rates/{fromCurrency}/to/{toCurrency} : Consultar taxa de câmbio atual
     *
     * @param fromCurrency  (required)
     * @param toCurrency  (required)
     * @return Taxa de câmbio atual (status code 200)
     *         or Taxa não encontrada (status code 404)
     */
    @Operation(
        operationId = "getCurrentExchangeRate",
        summary = "Consultar taxa de câmbio atual",
        tags = { "Taxas de Câmbio" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Taxa de câmbio atual", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExchangeRateOpenApiDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Taxa não encontrada", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseOpenApiDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/exchange-rates/{fromCurrency}/to/{toCurrency}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ExchangeRateOpenApiDto> _getCurrentExchangeRate(
        @Parameter(name = "fromCurrency", description = "", required = true, in = ParameterIn.PATH) @PathVariable("fromCurrency") String fromCurrency,
        @Parameter(name = "toCurrency", description = "", required = true, in = ParameterIn.PATH) @PathVariable("toCurrency") String toCurrency
    ) {
        return getCurrentExchangeRate(fromCurrency, toCurrency);
    }

    // Override this method
    default  ResponseEntity<ExchangeRateOpenApiDto> getCurrentExchangeRate(String fromCurrency, String toCurrency) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"toCurrencyName\" : \"Tibar\", \"rate\" : 2.5, \"toCurrencyCode\" : \"TB\", \"id\" : 0, \"fromCurrencyName\" : \"Ouro Real\", \"fromCurrencyCode\" : \"OR\", \"effectiveDate\" : \"2025-01-30T00:00:00.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /exchange-rates/{fromCurrency}/to/{toCurrency} : Atualizar ou criar taxa de câmbio
     *
     * @param fromCurrency  (required)
     * @param toCurrency  (required)
     * @param exchangeRateCreateOpenApiDto  (required)
     * @return Taxa atualizada/criada (status code 200)
     *         or Dados inválidos (status code 400)
     */
    @Operation(
        operationId = "updateExchangeRate",
        summary = "Atualizar ou criar taxa de câmbio",
        tags = { "Taxas de Câmbio" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Taxa atualizada/criada", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExchangeRateOpenApiDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Dados inválidos", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseOpenApiDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/exchange-rates/{fromCurrency}/to/{toCurrency}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<ExchangeRateOpenApiDto> _updateExchangeRate(
        @Parameter(name = "fromCurrency", description = "", required = true, in = ParameterIn.PATH) @PathVariable("fromCurrency") String fromCurrency,
        @Parameter(name = "toCurrency", description = "", required = true, in = ParameterIn.PATH) @PathVariable("toCurrency") String toCurrency,
        @Parameter(name = "ExchangeRateCreateOpenApiDto", description = "", required = true) @Valid @RequestBody ExchangeRateCreateOpenApiDto exchangeRateCreateOpenApiDto
    ) {
        return updateExchangeRate(fromCurrency, toCurrency, exchangeRateCreateOpenApiDto);
    }

    // Override this method
    default  ResponseEntity<ExchangeRateOpenApiDto> updateExchangeRate(String fromCurrency, String toCurrency, ExchangeRateCreateOpenApiDto exchangeRateCreateOpenApiDto) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"toCurrencyName\" : \"Tibar\", \"rate\" : 2.5, \"toCurrencyCode\" : \"TB\", \"id\" : 0, \"fromCurrencyName\" : \"Ouro Real\", \"fromCurrencyCode\" : \"OR\", \"effectiveDate\" : \"2025-01-30T00:00:00.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
