/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.srm.currency.api.generated;

import com.srm.currency.model.generated.ErrorResponseOpenApiDto;
import com.srm.currency.model.generated.TransactionCreateOpenApiDto;
import com.srm.currency.model.generated.TransactionOpenApiDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-08-06T15:54:51.646202200-03:00[America/Sao_Paulo]")
@Validated
@Controller
@Tag(name = "Transações", description = "Operações para listar e criar transações")
@RequestMapping("${openapi.sistemaDeConversoDeMoedasDoReinoSRM.base-path:}")
public interface TransactionsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /transactions : Criar uma transação
     *
     * @param transactionCreateOpenApiDto  (required)
     * @return Transação criada (status code 201)
     *         or Dados inválidos (status code 400)
     */
    @Operation(
        operationId = "createTransaction",
        summary = "Criar uma transação",
        tags = { "Transações" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Transação criada", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TransactionOpenApiDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Dados inválidos", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseOpenApiDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/transactions",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<TransactionOpenApiDto> _createTransaction(
        @Parameter(name = "TransactionCreateOpenApiDto", description = "", required = true) @Valid @RequestBody TransactionCreateOpenApiDto transactionCreateOpenApiDto
    ) {
        return createTransaction(transactionCreateOpenApiDto);
    }

    // Override this method
    default  ResponseEntity<TransactionOpenApiDto> createTransaction(TransactionCreateOpenApiDto transactionCreateOpenApiDto) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"convertedAmount\" : 1.4658129805029452, \"originalAmount\" : 6.027456183070403, \"exchangeRate\" : 5.962133916683182, \"id\" : 0, \"transactionDate\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /transactions : Listar transações (filtros simples)
     *
     * @return Página de transações (status code 200)
     */
    @Operation(
        operationId = "listTransactions",
        summary = "Listar transações (filtros simples)",
        tags = { "Transações" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Página de transações", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = TransactionOpenApiDto.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/transactions",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<TransactionOpenApiDto>> _listTransactions(
        
    ) {
        return listTransactions();
    }

    // Override this method
    default  ResponseEntity<List<TransactionOpenApiDto>> listTransactions() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"convertedAmount\" : 1.4658129805029452, \"originalAmount\" : 6.027456183070403, \"exchangeRate\" : 5.962133916683182, \"id\" : 0, \"transactionDate\" : \"2000-01-23T04:56:07.000+00:00\" }, { \"convertedAmount\" : 1.4658129805029452, \"originalAmount\" : 6.027456183070403, \"exchangeRate\" : 5.962133916683182, \"id\" : 0, \"transactionDate\" : \"2000-01-23T04:56:07.000+00:00\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
