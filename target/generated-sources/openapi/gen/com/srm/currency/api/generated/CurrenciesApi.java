/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.srm.currency.api.generated;

import java.math.BigDecimal;
import com.srm.currency.model.generated.CurrencyConversionResponseOpenApiDto;
import com.srm.currency.model.generated.CurrencySimpleOpenApiDto;
import com.srm.currency.model.generated.ErrorResponseOpenApiDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-08-06T15:54:51.646202200-03:00[America/Sao_Paulo]")
@Validated
@Controller
@Tag(name = "Conversão", description = "Endpoints de conversão entre moedas")
@RequestMapping("${openapi.sistemaDeConversoDeMoedasDoReinoSRM.base-path:}")
public interface CurrenciesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /currencies/{fromCurrency}/convert-to/{toCurrency} : Converter moeda (query params)
     * Converte um valor de &#x60;fromCurrency&#x60; para &#x60;toCurrency&#x60; usando query params. Parâmetros: &#x60;amount&#x60; (required) e opcionais &#x60;productId&#x60;, &#x60;quantity&#x60;. Aplica multiplicadores por categoria se &#x60;productId&#x60; for informado. 
     *
     * @param fromCurrency  (required)
     * @param toCurrency  (required)
     * @param amount Valor a ser convertido (required)
     * @param productId ID do produto (1-6) (optional)
     * @param quantity Quantidade do produto (optional)
     * @return Conversão realizada com sucesso (status code 200)
     *         or Dados inválidos (status code 400)
     *         or Moeda ou produto não encontrado (status code 404)
     */
    @Operation(
        operationId = "convertCurrencyQuery",
        summary = "Converter moeda (query params)",
        description = "Converte um valor de `fromCurrency` para `toCurrency` usando query params. Parâmetros: `amount` (required) e opcionais `productId`, `quantity`. Aplica multiplicadores por categoria se `productId` for informado. ",
        tags = { "Conversão" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Conversão realizada com sucesso", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CurrencyConversionResponseOpenApiDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Dados inválidos", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseOpenApiDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Moeda ou produto não encontrado", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseOpenApiDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/currencies/{fromCurrency}/convert-to/{toCurrency}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<CurrencyConversionResponseOpenApiDto> _convertCurrencyQuery(
        @Parameter(name = "fromCurrency", description = "", required = true, in = ParameterIn.PATH) @PathVariable("fromCurrency") String fromCurrency,
        @Parameter(name = "toCurrency", description = "", required = true, in = ParameterIn.PATH) @PathVariable("toCurrency") String toCurrency,
        @NotNull @DecimalMin("0.00010") @Parameter(name = "amount", description = "Valor a ser convertido", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "amount", required = true) BigDecimal amount,
        @Min(1L) @Max(6L) @Parameter(name = "productId", description = "ID do produto (1-6)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "productId", required = false) Long productId,
        @Parameter(name = "quantity", description = "Quantidade do produto", in = ParameterIn.QUERY) @Valid @RequestParam(value = "quantity", required = false) BigDecimal quantity
    ) {
        return convertCurrencyQuery(fromCurrency, toCurrency, amount, productId, quantity);
    }

    // Override this method
    default  ResponseEntity<CurrencyConversionResponseOpenApiDto> convertCurrencyQuery(String fromCurrency, String toCurrency, BigDecimal amount, Long productId, BigDecimal quantity) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"convertedAmount\" : 250.0, \"notes\" : \"Taxa de câmbio: 2.5000\", \"fromCurrencySymbol\" : \"⚜\", \"toCurrencySymbol\" : \"⛏\", \"toCurrencyCode\" : \"TB\", \"categoryName\" : \"Peles\", \"productName\" : \"Pele de Urso das Montanhas\", \"conversionDate\" : \"2000-01-23T04:56:07.000+00:00\", \"originalAmount\" : 100.0, \"toCurrencyName\" : \"Tibar\", \"exchangeRate\" : 2.5, \"categoryMultiplier\" : 1.0, \"fromCurrencyName\" : \"Ouro Real\", \"fromCurrencyCode\" : \"OR\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /currencies : Listar todas as moedas
     *
     * @return Lista de moedas (status code 200)
     */
    @Operation(
        operationId = "getAllCurrencies",
        summary = "Listar todas as moedas",
        tags = { "Conversão" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Lista de moedas", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = CurrencySimpleOpenApiDto.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/currencies",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<CurrencySimpleOpenApiDto>> _getAllCurrencies(
        
    ) {
        return getAllCurrencies();
    }

    // Override this method
    default  ResponseEntity<List<CurrencySimpleOpenApiDto>> getAllCurrencies() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"symbol\" : \"⚜\", \"kingdomName\" : \"SRM\", \"code\" : \"OR\", \"isBaseCurrency\" : true, \"name\" : \"Ouro Real\", \"id\" : 1 }, { \"symbol\" : \"⚜\", \"kingdomName\" : \"SRM\", \"code\" : \"OR\", \"isBaseCurrency\" : true, \"name\" : \"Ouro Real\", \"id\" : 1 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
