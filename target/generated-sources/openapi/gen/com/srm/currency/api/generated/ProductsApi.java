/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.srm.currency.api.generated;

import com.srm.currency.model.generated.ErrorResponseOpenApiDto;
import com.srm.currency.model.generated.ProductCreateOpenApiDto;
import com.srm.currency.model.generated.ProductSimpleOpenApiDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-08-06T15:54:51.646202200-03:00[America/Sao_Paulo]")
@Validated
@Controller
@Tag(name = "Produtos", description = "Operações relacionadas aos produtos e categorias")
@RequestMapping("${openapi.sistemaDeConversoDeMoedasDoReinoSRM.base-path:}")
public interface ProductsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /products : Criar um novo produto
     *
     * @param productCreateOpenApiDto  (required)
     * @return Produto criado (status code 201)
     *         or Dados inválidos (status code 400)
     */
    @Operation(
        operationId = "createProduct",
        summary = "Criar um novo produto",
        tags = { "Produtos" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Produto criado"),
            @ApiResponse(responseCode = "400", description = "Dados inválidos", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseOpenApiDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/products",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> _createProduct(
        @Parameter(name = "ProductCreateOpenApiDto", description = "", required = true) @Valid @RequestBody ProductCreateOpenApiDto productCreateOpenApiDto
    ) {
        return createProduct(productCreateOpenApiDto);
    }

    // Override this method
    default  ResponseEntity<Void> createProduct(ProductCreateOpenApiDto productCreateOpenApiDto) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /products : Listar todos os produtos
     *
     * @return Lista de produtos (status code 200)
     */
    @Operation(
        operationId = "getAllProducts",
        summary = "Listar todos os produtos",
        tags = { "Produtos" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Lista de produtos", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ProductSimpleOpenApiDto.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/products",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<ProductSimpleOpenApiDto>> _getAllProducts(
        
    ) {
        return getAllProducts();
    }

    // Override this method
    default  ResponseEntity<List<ProductSimpleOpenApiDto>> getAllProducts() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"kingdomName\" : \"Montanhas dos Anões\", \"baseCurrencyCode\" : \"OR\", \"categoryMultiplier\" : 1.0, \"name\" : \"Pele de Urso das Montanhas\", \"description\" : \"Pele resistente de urso das montanhas geladas\", \"id\" : 1, \"categoryName\" : \"Peles\", \"baseCurrencySymbol\" : \"⚜\", \"basePrice\" : 50.0 }, { \"kingdomName\" : \"Montanhas dos Anões\", \"baseCurrencyCode\" : \"OR\", \"categoryMultiplier\" : 1.0, \"name\" : \"Pele de Urso das Montanhas\", \"description\" : \"Pele resistente de urso das montanhas geladas\", \"id\" : 1, \"categoryName\" : \"Peles\", \"baseCurrencySymbol\" : \"⚜\", \"basePrice\" : 50.0 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /products/{id} : Obter produto por id
     *
     * @param id  (required)
     * @return Produto encontrado (status code 200)
     *         or Produto não encontrado (status code 404)
     */
    @Operation(
        operationId = "getProductById",
        summary = "Obter produto por id",
        tags = { "Produtos" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Produto encontrado", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProductSimpleOpenApiDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Produto não encontrado", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseOpenApiDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/products/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ProductSimpleOpenApiDto> _getProductById(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) {
        return getProductById(id);
    }

    // Override this method
    default  ResponseEntity<ProductSimpleOpenApiDto> getProductById(Long id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"kingdomName\" : \"Montanhas dos Anões\", \"baseCurrencyCode\" : \"OR\", \"categoryMultiplier\" : 1.0, \"name\" : \"Pele de Urso das Montanhas\", \"description\" : \"Pele resistente de urso das montanhas geladas\", \"id\" : 1, \"categoryName\" : \"Peles\", \"baseCurrencySymbol\" : \"⚜\", \"basePrice\" : 50.0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
